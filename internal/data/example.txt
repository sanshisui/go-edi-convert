// package main

// import (
// 	"encoding/xml"
// 	"fmt"
// 	"os"
// )

// type Schema struct {
// 	XMLName      xml.Name      `xml:"schema"`
// 	Elements     []Element     `xml:"element"`
// 	ComplexTypes []ComplexType `xml:"complexType"`
// }

// type Element struct {
// 	Name        string       `xml:"name,attr"`
// 	Type        string       `xml:"type,attr"`
// 	MinOccurs   string       `xml:"minOccurs,attr,omitempty"`
// 	MaxOccurs   string       `xml:"maxOccurs,attr,omitempty"`
// 	Sequence    *Sequence    `xml:"sequence,omitempty"`
// 	Annotation  *Annotation  `xml:"annotation,omitempty"`
// 	ComplexType *ComplexType `xml:"complexType,omitempty"` // 内联复杂类型定义
// }

// type ComplexType struct {
// 	Name       string      `xml:"name,attr"`
// 	Sequence   *Sequence   `xml:"sequence,omitempty"`
// 	Annotation *Annotation `xml:"annotation,omitempty"`
// }

// type Sequence struct {
// 	MinOccurs string     `xml:"minOccurs,attr,omitempty"`
// 	MaxOccurs string     `xml:"maxOccurs,attr,omitempty"`
// 	Elements  []Element  `xml:"element"`
// 	Sequences []Sequence `xml:"sequence,omitempty"` // 嵌套序列
// }

// type Annotation struct {
// 	AppInfo       string `xml:"appinfo"`
// 	Documentation string `xml:"documentation"`
// }

// func main() {
// 	data, err := os.ReadFile("./internal/data/order.xsd")
// 	if err != nil {
// 		fmt.Printf("读取文件错误: %v\n", err)
// 		return
// 	}

// 	var schema Schema
// 	err = xml.Unmarshal(data, &schema)
// 	if err != nil {
// 		fmt.Printf("解析XML错误: %v\n", err)
// 		return
// 	}

// 	// 打印顶层元素
// 	fmt.Println("顶层元素:")
// 	for _, elem := range schema.Elements {
// 		fmt.Printf("元素名: %s, 类型: %s\n", elem.Name, elem.Type)
// 		if elem.MinOccurs != "" || elem.MaxOccurs != "" {
// 			fmt.Printf("  出现次数: 最小=%s, 最大=%s\n",
// 				getDefaultIfEmpty(elem.MinOccurs, "1"),
// 				getDefaultIfEmpty(elem.MaxOccurs, "1"))
// 		}

// 		if elem.Annotation != nil {
// 			printAnnotation(elem.Annotation, "  ")
// 		}
// 	}

// 	// 打印复杂类型
// 	fmt.Println("\n复杂类型:")
// 	for _, complexType := range schema.ComplexTypes {
// 		fmt.Printf("复杂类型名: %s\n", complexType.Name)

// 		if complexType.Annotation != nil {
// 			printAnnotation(complexType.Annotation, "  ")
// 		}

// 		if complexType.Sequence != nil {
// 			printSequence(complexType.Sequence, "  ")
// 		}
// 		fmt.Println()
// 	}
// }

// // 打印注释信息
// func printAnnotation(annotation *Annotation, indent string) {
// 	if annotation.AppInfo != "" {
// 		fmt.Printf("%s应用信息: %s\n", indent, annotation.AppInfo)
// 	}
// 	if annotation.Documentation != "" {
// 		fmt.Printf("%s文档说明: %s\n", indent, annotation.Documentation)
// 	}
// }

// // 打印序列信息
// func printSequence(sequence *Sequence, indent string) {
// 	minOccurs := getDefaultIfEmpty(sequence.MinOccurs, "1")
// 	maxOccurs := getDefaultIfEmpty(sequence.MaxOccurs, "1")

// 	fmt.Printf("%s序列出现次数: 最小=%s, 最大=%s\n", indent, minOccurs, maxOccurs)
// 	fmt.Printf("%s包含的元素:\n", indent)

// 	for _, elem := range sequence.Elements {
// 		elemMinOccurs := getDefaultIfEmpty(elem.MinOccurs, "1")
// 		elemMaxOccurs := getDefaultIfEmpty(elem.MaxOccurs, "1")

// 		fmt.Printf("%s  - 元素名: %s, 类型: %s, 最小出现: %s, 最大出现: %s\n",
// 			indent, elem.Name, elem.Type, elemMinOccurs, elemMaxOccurs)

// 		if elem.Annotation != nil {
// 			printAnnotation(elem.Annotation, indent+"    ")
// 		}

// 		if elem.Sequence != nil {
// 			printSequence(elem.Sequence, indent+"    ")
// 		}

// 		if elem.ComplexType != nil {
// 			fmt.Printf("%s    内联复杂类型:\n", indent)
// 			if elem.ComplexType.Sequence != nil {
// 				printSequence(elem.ComplexType.Sequence, indent+"      ")
// 			}
// 		}
// 	}

// 	// 处理嵌套序列
// 	if len(sequence.Sequences) > 0 {
// 		fmt.Printf("%s嵌套序列:\n", indent)
// 		for i, nestedSeq := range sequence.Sequences {
// 			fmt.Printf("%s  嵌套序列 #%d:\n", indent, i+1)
// 			printSequence(&nestedSeq, indent+"    ")
// 		}
// 	}
// }

// // 获取默认值（如果为空）
// func getDefaultIfEmpty(value, defaultValue string) string {
// 	if value == "" {
// 		return defaultValue
// 	}
// 	return value
// }


// type XsdElement struct {
// 	XMLName   xml.Name     `xml:"element"`
// 	Name      string       `xml:"name,attr"`
// 	Type      string       `xml:"type,attr"`
// 	MinOccurs string       `xml:"minOccurs,attr"`
// 	MaxOccurs string       `xml:"maxOccurs,attr"`
// 	Elements  []XsdElement `xml:"complexType>sequence>element"`
// }

// type XsdComplexType struct {
// 	Name     string       `xml:"name,attr"`
// 	Elements []XsdElement `xml:"sequence>element"`
// }

// type XsdSchema struct {
// 	Elements     []XsdElement     `xml:"element"`
// 	ComplexTypes []XsdComplexType `xml:"complexType"`
// }

// func getOccursType(maxOccurs string) string {
// 	if maxOccurs == "" || maxOccurs == "1" {
// 		return "object"
// 	}
// 	if maxOccurs == "unbounded" {
// 		return "array"
// 	}
// 	if n := strings.TrimSpace(maxOccurs); n != "" && n != "1" {
// 		return "array"
// 	}
// 	return "object"
// }

// // 递归解析complexType
// func buildTypeMap(types map[string]XsdComplexType, typeName string) interface{} {
// 	typ, ok := types[typeName]
// 	if !ok {
// 		return "object"
// 	}
// 	result := map[string]interface{}{}
// 	for _, elem := range typ.Elements {
// 		elemType := getOccursType(elem.MaxOccurs)
// 		if elem.Type != "" && types[elem.Type].Name != "" {
// 			// 嵌套complexType
// 			child := buildTypeMap(types, elem.Type)
// 			if elemType == "array" {
// 				result[elem.Name] = []interface{}{child}
// 			} else {
// 				result[elem.Name] = child
// 			}
// 		} else {
// 			// 基础类型或匿名complexType
// 			if len(elem.Elements) > 0 {
// 				child := map[string]interface{}{}
// 				for _, sub := range elem.Elements {
// 					child[sub.Name] = "object"
// 				}
// 				if elemType == "array" {
// 					result[elem.Name] = []interface{}{child}
// 				} else {
// 					result[elem.Name] = child
// 				}
// 			} else {
// 				if elemType == "array" {
// 					result[elem.Name] = []interface{}{"object"}
// 				} else {
// 					result[elem.Name] = "object"
// 				}
// 			}
// 		}
// 	}
// 	return result
// }

// func main() {
// 	file, err := os.Open("./internal/data/order.xsd")
// 	if err != nil {
// 		panic(err)
// 	}
// 	defer file.Close()

// 	var schema XsdSchema
// 	decoder := xml.NewDecoder(file)
// 	if err := decoder.Decode(&schema); err != nil {
// 		panic(err)
// 	}

// 	// 构建complexType映射
// 	typeMap := make(map[string]XsdComplexType)
// 	for _, typ := range schema.ComplexTypes {
// 		typeMap[typ.Name] = typ
// 	}

	// 假设根元素为EDIFACT
// 	rootType := ""
// 	for _, elem := range schema.Elements {
// 		if elem.Name == "EDIFACT" {
// 			rootType = elem.Type
// 			break
// 		}
// 	}
// 	if rootType == "" {
// 		fmt.Println("未找到EDIFACT根元素")
// 		return
// 	}

// 	result := buildTypeMap(typeMap, rootType)
// 	fmt.Printf("%#v\n", result)
// }

// package main

// import (
// 	"encoding/xml"
// 	"fmt"
// 	"os"
// 	"strings"
// )

// type XsdElement struct {
// 	XMLName   xml.Name     `xml:"element"`
// 	Name      string       `xml:"name,attr"`
// 	Type      string       `xml:"type,attr"`
// 	MinOccurs string       `xml:"minOccurs,attr"`
// 	MaxOccurs string       `xml:"maxOccurs,attr"`
// 	Elements  []XsdElement `xml:"complexType>sequence>element"`
// }

// type XsdComplexType struct {
// 	Name     string       `xml:"name,attr"`
// 	Elements []XsdElement `xml:"sequence>element"`
// }

// type XsdSchema struct {
// 	Elements     []XsdElement     `xml:"element"`
// 	ComplexTypes []XsdComplexType `xml:"complexType"`
// }

// type GroupDef struct {
// 	Name       string
// 	Segments   []string
// 	Children   []*GroupDef
// 	Repeatable bool
// }

// func isGroupType(typeName string) bool {
// 	return strings.HasPrefix(typeName, "GROUP_")
// }

// func getOccurs(maxOccurs string) bool {
// 	return maxOccurs == "unbounded" || (maxOccurs != "" && maxOccurs != "1")
// }

// // 递归构建GroupDef树
// func buildGroupDef(types map[string]XsdComplexType, typeName, groupName string) *GroupDef {
// 	typ, ok := types[typeName]
// 	if !ok {
// 		return nil
// 	}
// 	group := &GroupDef{
// 		Name:       groupName,
// 		Segments:   []string{},
// 		Children:   []*GroupDef{},
// 		Repeatable: false,
// 	}
// 	for _, elem := range typ.Elements {
// 		if isGroupType(elem.Type) {
// 			child := buildGroupDef(types, elem.Type, elem.Name)
// 			if child != nil {
// 				child.Repeatable = getOccurs(elem.MaxOccurs)
// 				group.Children = append(group.Children, child)
// 			}
// 		} else {
// 			group.Segments = append(group.Segments, elem.Name)
// 		}
// 	}
// 	return group
// }

// func main() {
// 	file, err := os.Open("./internal/data/order.xsd")
// 	if err != nil {
// 		panic(err)
// 	}
// 	defer file.Close()

// 	var schema XsdSchema
// 	decoder := xml.NewDecoder(file)
// 	if err := decoder.Decode(&schema); err != nil {
// 		panic(err)
// 	}

// 	// 构建complexType映射
// 	typeMap := make(map[string]XsdComplexType)
// 	for _, typ := range schema.ComplexTypes {
// 		typeMap[typ.Name] = typ
// 	}

// 	// 找到ORDERS根
// 	rootType := ""
// 	for _, elem := range schema.Elements {
// 		if elem.Name == "EDIFACT" {
// 			rootType = elem.Type
// 			break
// 		}
// 	}
// 	if rootType == "" {
// 		fmt.Println("未找到EDIFACT根元素")
// 		return
// 	}

// 	// 以ORDERS为主业务根
// 	ordersType := ""
// 	for _, elem := range typeMap[rootType].Elements {
// 		if elem.Name == "ORDERS" {
// 			ordersType = elem.Type
// 			break
// 		}
// 	}
// 	if ordersType == "" {
// 		fmt.Println("未找到ORDERS元素")
// 		return
// 	}

// 	groupTree := buildGroupDef(typeMap, ordersType, "ORDERS")
// 	printGroupDef(groupTree, 0)
// }

// // 打印GroupDef树结构
// func printGroupDef(g *GroupDef, level int) {
// 	prefix := strings.Repeat("  ", level)
// 	fmt.Printf("%s- %s (Repeatable: %v)\n", prefix, g.Name, g.Repeatable)
// 	if len(g.Segments) > 0 {
// 		fmt.Printf("%s  Segments: %v\n", prefix, g.Segments)
// 	}
// 	for _, child := range g.Children {
// 		printGroupDef(child, level+1)
// 	}
// }






for true {
			if strings.HasPrefix(b, nodes[i].Name) {
				log.Println(nodes[i].Name, b[:3])
				if nodes[i].Type == "Object"  {
					se := strings.Split(b, "+")
					obj := map[string]interface{}{}
					for m := 1; m < len(se); m++  {
						fieldKey := fmt.Sprintf("%s%02d", se[0], m) // 使用格式化字符串生成 Key，例如 UNH01, UNH02
						if strings.Contains(se[m], ":") {
							smc := strings.Split(se[m], ":")
							objc := map[string]interface{}{}
							for l := 0; l < len(smc); l++  {
								componentKey := fmt.Sprintf("%s%02d", fieldKey, l+1) // 例如 UNH0201, UNH0202
								objc[componentKey] = smc[l]
							}
							obj[fieldKey] = objc
							continue
						}
						obj[fieldKey] = se[m]
					}
					results[nodes[i].Name] = obj
					i++
					break
				}else {
					se := strings.Split(b, "+")
					obj := map[string]interface{}{}
					for m := 1; m < len(se); m++  {
						fieldKey := fmt.Sprintf("%s%02d", se[0], m) // 使用格式化字符串生成 Key
						if strings.Contains(se[m], ":") && !strings.Contains(se[m], "?:") {
							smc := strings.Split(se[m], ":")
							objc := map[string]interface{}{}
							for l := 0; l < len(smc); l++  {
								componentKey := fmt.Sprintf("%s%02d", fieldKey, l+1) // 例如 LIN0101, LIN0102
								objc[componentKey] = smc[l]
							}
							obj[fieldKey] = objc
							continue
						}
						
						obj[fieldKey] = se[m]
					}
					//results[nodes[i].Name] = append(results[nodes[i].Name].([]interface{}), obj)
					if arr, ok := results[nodes[i].Name].([]interface{}); ok {
						results[nodes[i].Name] = append(arr, obj)
					} else {
						results[nodes[i].Name] = []interface{}{obj}
					}
					break
				}
			}else if nodes[i].Children != nil && strings.HasPrefix(b, nodes[i].Children[p].Name) {
				
			} else {
				i++
			}
		}